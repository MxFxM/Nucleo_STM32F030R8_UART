
STM32F030R8_UART_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000057c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800063c  08000644  00010644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800063c  0800063c  00010644  2**0
                  CONTENTS
  4 .ARM          00000000  0800063c  0800063c  00010644  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800063c  08000644  00010644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800063c  0800063c  0001063c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000640  08000640  00010640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000644  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000644  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010644  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000190  00000000  00000000  0001066c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000011d  00000000  00000000  000107fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000a8  00000000  00000000  00010920  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000070  00000000  00000000  000109c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000b4f  00000000  00000000  00010a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000202  00000000  00000000  00011587  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003116  00000000  00000000  00011789  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001489f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000150  00000000  00000000  0001491c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000624 	.word	0x08000624

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000624 	.word	0x08000624

08000108 <PUT32>:
.thumb
;@-----------------------
.thumb_func
.globl PUT32
PUT32:
    str r1,[r0]
 8000108:	6001      	str	r1, [r0, #0]
    bx lr
 800010a:	4770      	bx	lr

0800010c <GET32>:
;@-----------------------
.thumb_func
.globl GET32
GET32:
    ldr r0,[r0]
 800010c:	6800      	ldr	r0, [r0, #0]
    bx lr
 800010e:	4770      	bx	lr

08000110 <dummy>:
;@-----------------------
.thumb_func
.globl dummy
dummy:
    bx lr
 8000110:	4770      	bx	lr
	...

08000114 <button_init>:

//------------------------------------------------------------------------
#ifdef BRICK_BUTTON
//------------------------------------------------------------------------
static void button_init ( void )
{
 8000114:	b580      	push	{r7, lr}
 8000116:	b082      	sub	sp, #8
 8000118:	af00      	add	r7, sp, #0
    unsigned int ra;

    ra=GET32(RCCBASE+0x14);
 800011a:	4b1a      	ldr	r3, [pc, #104]	; (8000184 <button_init+0x70>)
 800011c:	0018      	movs	r0, r3
 800011e:	f7ff fff5 	bl	800010c <GET32>
 8000122:	0003      	movs	r3, r0
 8000124:	607b      	str	r3, [r7, #4]
    ra|=1<<19; //enable port C
 8000126:	687b      	ldr	r3, [r7, #4]
 8000128:	2280      	movs	r2, #128	; 0x80
 800012a:	0312      	lsls	r2, r2, #12
 800012c:	4313      	orrs	r3, r2
 800012e:	607b      	str	r3, [r7, #4]
    PUT32(RCCBASE+0x14,ra);
 8000130:	687b      	ldr	r3, [r7, #4]
 8000132:	4a14      	ldr	r2, [pc, #80]	; (8000184 <button_init+0x70>)
 8000134:	0019      	movs	r1, r3
 8000136:	0010      	movs	r0, r2
 8000138:	f7ff ffe6 	bl	8000108 <PUT32>

    ra=GET32(GPIOC_MODER);
 800013c:	4b12      	ldr	r3, [pc, #72]	; (8000188 <button_init+0x74>)
 800013e:	0018      	movs	r0, r3
 8000140:	f7ff ffe4 	bl	800010c <GET32>
 8000144:	0003      	movs	r3, r0
 8000146:	607b      	str	r3, [r7, #4]
    ra&=~(3<<26); //PC13
 8000148:	687b      	ldr	r3, [r7, #4]
 800014a:	4a10      	ldr	r2, [pc, #64]	; (800018c <button_init+0x78>)
 800014c:	4013      	ands	r3, r2
 800014e:	607b      	str	r3, [r7, #4]
    PUT32(GPIOC_MODER,ra);
 8000150:	687b      	ldr	r3, [r7, #4]
 8000152:	4a0d      	ldr	r2, [pc, #52]	; (8000188 <button_init+0x74>)
 8000154:	0019      	movs	r1, r3
 8000156:	0010      	movs	r0, r2
 8000158:	f7ff ffd6 	bl	8000108 <PUT32>

    ra=GET32(GPIOC_PUPDR);
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <button_init+0x7c>)
 800015e:	0018      	movs	r0, r3
 8000160:	f7ff ffd4 	bl	800010c <GET32>
 8000164:	0003      	movs	r3, r0
 8000166:	607b      	str	r3, [r7, #4]
    ra&=~(3<<26); //PC13
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	4a08      	ldr	r2, [pc, #32]	; (800018c <button_init+0x78>)
 800016c:	4013      	ands	r3, r2
 800016e:	607b      	str	r3, [r7, #4]
    PUT32(GPIOC_PUPDR,ra);
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	4a07      	ldr	r2, [pc, #28]	; (8000190 <button_init+0x7c>)
 8000174:	0019      	movs	r1, r3
 8000176:	0010      	movs	r0, r2
 8000178:	f7ff ffc6 	bl	8000108 <PUT32>
}
 800017c:	46c0      	nop			; (mov r8, r8)
 800017e:	46bd      	mov	sp, r7
 8000180:	b002      	add	sp, #8
 8000182:	bd80      	pop	{r7, pc}
 8000184:	40021014 	.word	0x40021014
 8000188:	48000800 	.word	0x48000800
 800018c:	f3ffffff 	.word	0xf3ffffff
 8000190:	4800080c 	.word	0x4800080c

08000194 <read_button>:
//------------------------------------------------------------------------
static unsigned int read_button ( void )
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
    return(GET32(GPIOC_IDR)&(1<<13));
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <read_button+0x1c>)
 800019a:	0018      	movs	r0, r3
 800019c:	f7ff ffb6 	bl	800010c <GET32>
 80001a0:	0002      	movs	r2, r0
 80001a2:	2380      	movs	r3, #128	; 0x80
 80001a4:	019b      	lsls	r3, r3, #6
 80001a6:	4013      	ands	r3, r2
}
 80001a8:	0018      	movs	r0, r3
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	46c0      	nop			; (mov r8, r8)
 80001b0:	48000810 	.word	0x48000810

080001b4 <led_init>:
//------------------------------------------------------------------------
static void led_init ( void )
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
    unsigned int ra;

    ra=GET32(RCCBASE+0x14);
 80001ba:	4b2e      	ldr	r3, [pc, #184]	; (8000274 <led_init+0xc0>)
 80001bc:	0018      	movs	r0, r3
 80001be:	f7ff ffa5 	bl	800010c <GET32>
 80001c2:	0003      	movs	r3, r0
 80001c4:	607b      	str	r3, [r7, #4]
    ra|=1<<17; //enable port A
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2280      	movs	r2, #128	; 0x80
 80001ca:	0292      	lsls	r2, r2, #10
 80001cc:	4313      	orrs	r3, r2
 80001ce:	607b      	str	r3, [r7, #4]
    PUT32(RCCBASE+0x14,ra);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a28      	ldr	r2, [pc, #160]	; (8000274 <led_init+0xc0>)
 80001d4:	0019      	movs	r1, r3
 80001d6:	0010      	movs	r0, r2
 80001d8:	f7ff ff96 	bl	8000108 <PUT32>

    ra=GET32(GPIOA_MODER);
 80001dc:	2390      	movs	r3, #144	; 0x90
 80001de:	05db      	lsls	r3, r3, #23
 80001e0:	0018      	movs	r0, r3
 80001e2:	f7ff ff93 	bl	800010c <GET32>
 80001e6:	0003      	movs	r3, r0
 80001e8:	607b      	str	r3, [r7, #4]
    ra&=~(3<<10); //PA5
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a22      	ldr	r2, [pc, #136]	; (8000278 <led_init+0xc4>)
 80001ee:	4013      	ands	r3, r2
 80001f0:	607b      	str	r3, [r7, #4]
    ra|=1<<10; //PA5
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2280      	movs	r2, #128	; 0x80
 80001f6:	00d2      	lsls	r2, r2, #3
 80001f8:	4313      	orrs	r3, r2
 80001fa:	607b      	str	r3, [r7, #4]
    PUT32(GPIOA_MODER,ra);
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	2390      	movs	r3, #144	; 0x90
 8000200:	05db      	lsls	r3, r3, #23
 8000202:	0011      	movs	r1, r2
 8000204:	0018      	movs	r0, r3
 8000206:	f7ff ff7f 	bl	8000108 <PUT32>
    ra=GET32(GPIOA_OTYPER);
 800020a:	4b1c      	ldr	r3, [pc, #112]	; (800027c <led_init+0xc8>)
 800020c:	0018      	movs	r0, r3
 800020e:	f7ff ff7d 	bl	800010c <GET32>
 8000212:	0003      	movs	r3, r0
 8000214:	607b      	str	r3, [r7, #4]
    ra&=~(1<<5); //PA5
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2220      	movs	r2, #32
 800021a:	4393      	bics	r3, r2
 800021c:	607b      	str	r3, [r7, #4]
    PUT32(GPIOA_OTYPER,ra);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4a16      	ldr	r2, [pc, #88]	; (800027c <led_init+0xc8>)
 8000222:	0019      	movs	r1, r3
 8000224:	0010      	movs	r0, r2
 8000226:	f7ff ff6f 	bl	8000108 <PUT32>
    ra=GET32(GPIOA_OSPEEDR);
 800022a:	4b15      	ldr	r3, [pc, #84]	; (8000280 <led_init+0xcc>)
 800022c:	0018      	movs	r0, r3
 800022e:	f7ff ff6d 	bl	800010c <GET32>
 8000232:	0003      	movs	r3, r0
 8000234:	607b      	str	r3, [r7, #4]
    ra|=3<<10; //PA5
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	22c0      	movs	r2, #192	; 0xc0
 800023a:	0112      	lsls	r2, r2, #4
 800023c:	4313      	orrs	r3, r2
 800023e:	607b      	str	r3, [r7, #4]
    PUT32(GPIOA_OSPEEDR,ra);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4a0f      	ldr	r2, [pc, #60]	; (8000280 <led_init+0xcc>)
 8000244:	0019      	movs	r1, r3
 8000246:	0010      	movs	r0, r2
 8000248:	f7ff ff5e 	bl	8000108 <PUT32>
    ra=GET32(GPIOA_PUPDR);
 800024c:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <led_init+0xd0>)
 800024e:	0018      	movs	r0, r3
 8000250:	f7ff ff5c 	bl	800010c <GET32>
 8000254:	0003      	movs	r3, r0
 8000256:	607b      	str	r3, [r7, #4]
    ra&=~(3<<10); //PA5
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a07      	ldr	r2, [pc, #28]	; (8000278 <led_init+0xc4>)
 800025c:	4013      	ands	r3, r2
 800025e:	607b      	str	r3, [r7, #4]
    PUT32(GPIOA_PUPDR,ra);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4a08      	ldr	r2, [pc, #32]	; (8000284 <led_init+0xd0>)
 8000264:	0019      	movs	r1, r3
 8000266:	0010      	movs	r0, r2
 8000268:	f7ff ff4e 	bl	8000108 <PUT32>
}
 800026c:	46c0      	nop			; (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	b002      	add	sp, #8
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40021014 	.word	0x40021014
 8000278:	fffff3ff 	.word	0xfffff3ff
 800027c:	48000004 	.word	0x48000004
 8000280:	48000008 	.word	0x48000008
 8000284:	4800000c 	.word	0x4800000c

08000288 <led_on>:
//------------------------------------------------------------------------
static void led_on ( void )
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
    PUT32(GPIOABASE+0x18,((1<<5)<<0));
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <led_on+0x14>)
 800028e:	2120      	movs	r1, #32
 8000290:	0018      	movs	r0, r3
 8000292:	f7ff ff39 	bl	8000108 <PUT32>
}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	48000018 	.word	0x48000018

080002a0 <led_off>:
//------------------------------------------------------------------------
static void led_off ( void )
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
    PUT32(GPIOABASE+0x18,((1<<5)<<16));
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	039b      	lsls	r3, r3, #14
 80002a8:	4a03      	ldr	r2, [pc, #12]	; (80002b8 <led_off+0x18>)
 80002aa:	0019      	movs	r1, r3
 80002ac:	0010      	movs	r0, r2
 80002ae:	f7ff ff2b 	bl	8000108 <PUT32>
}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	48000018 	.word	0x48000018

080002bc <clock_init>:
//------------------------------------------------------------------------
#endif //BRICK_BUTTON
//------------------------------------------------------------------------
static int clock_init ( void )
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
    //the clock source, bricks the microcontroller then press and
    //hold the user button, and press reset, on that reset this code
    //will see the button pressed and go into this infinite loop
    //instead of into the code below, allowing us to reprogram the
    //microcontrollers flash with hopefully a not buggy program.
    button_init();
 80002c2:	f7ff ff27 	bl	8000114 <button_init>
    if(read_button()==0)
 80002c6:	f7ff ff65 	bl	8000194 <read_button>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d106      	bne.n	80002dc <clock_init+0x20>
    {
        //make the led glow
        led_init();
 80002ce:	f7ff ff71 	bl	80001b4 <led_init>
        while(1)
        {
            led_on();
 80002d2:	f7ff ffd9 	bl	8000288 <led_on>
            led_off();
 80002d6:	f7ff ffe3 	bl	80002a0 <led_off>
            led_on();
 80002da:	e7fa      	b.n	80002d2 <clock_init+0x16>
    //the above was for me to develop this code and for you to change
    //this code as desired.
#endif //BRICK_BUTTON

    //switch to external clock.
    ra=GET32(RCC_CR);
 80002dc:	4b1f      	ldr	r3, [pc, #124]	; (800035c <clock_init+0xa0>)
 80002de:	0018      	movs	r0, r3
 80002e0:	f7ff ff14 	bl	800010c <GET32>
 80002e4:	0003      	movs	r3, r0
 80002e6:	607b      	str	r3, [r7, #4]
    ra|=1<<16;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2280      	movs	r2, #128	; 0x80
 80002ec:	0252      	lsls	r2, r2, #9
 80002ee:	4313      	orrs	r3, r2
 80002f0:	607b      	str	r3, [r7, #4]
    PUT32(RCC_CR,ra);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a19      	ldr	r2, [pc, #100]	; (800035c <clock_init+0xa0>)
 80002f6:	0019      	movs	r1, r3
 80002f8:	0010      	movs	r0, r2
 80002fa:	f7ff ff05 	bl	8000108 <PUT32>
    while(1) if(GET32(RCC_CR)&(1<<17)) break;
 80002fe:	4b17      	ldr	r3, [pc, #92]	; (800035c <clock_init+0xa0>)
 8000300:	0018      	movs	r0, r3
 8000302:	f7ff ff03 	bl	800010c <GET32>
 8000306:	0002      	movs	r2, r0
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	029b      	lsls	r3, r3, #10
 800030c:	4013      	ands	r3, r2
 800030e:	d100      	bne.n	8000312 <clock_init+0x56>
 8000310:	e7f5      	b.n	80002fe <clock_init+0x42>
 8000312:	46c0      	nop			; (mov r8, r8)
    ra=GET32(RCC_CFGR);
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <clock_init+0xa4>)
 8000316:	0018      	movs	r0, r3
 8000318:	f7ff fef8 	bl	800010c <GET32>
 800031c:	0003      	movs	r3, r0
 800031e:	607b      	str	r3, [r7, #4]
    ra&=~3;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2203      	movs	r2, #3
 8000324:	4393      	bics	r3, r2
 8000326:	607b      	str	r3, [r7, #4]
    ra|=1;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2201      	movs	r2, #1
 800032c:	4313      	orrs	r3, r2
 800032e:	607b      	str	r3, [r7, #4]
    PUT32(RCC_CFGR,ra);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a0b      	ldr	r2, [pc, #44]	; (8000360 <clock_init+0xa4>)
 8000334:	0019      	movs	r1, r3
 8000336:	0010      	movs	r0, r2
 8000338:	f7ff fee6 	bl	8000108 <PUT32>
    while(1) if((GET32(RCC_CFGR)&3)==1) break;
 800033c:	4b08      	ldr	r3, [pc, #32]	; (8000360 <clock_init+0xa4>)
 800033e:	0018      	movs	r0, r3
 8000340:	f7ff fee4 	bl	800010c <GET32>
 8000344:	0002      	movs	r2, r0
 8000346:	2303      	movs	r3, #3
 8000348:	4013      	ands	r3, r2
 800034a:	2b01      	cmp	r3, #1
 800034c:	d000      	beq.n	8000350 <clock_init+0x94>
 800034e:	e7f5      	b.n	800033c <clock_init+0x80>
 8000350:	46c0      	nop			; (mov r8, r8)
    return(0);
 8000352:	2300      	movs	r3, #0
}
 8000354:	0018      	movs	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	b002      	add	sp, #8
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40021000 	.word	0x40021000
 8000360:	40021004 	.word	0x40021004

08000364 <uart2_init>:
//------------------------------------------------------------------------
int uart2_init ( void )
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
    unsigned int ra;

    ra=GET32(RCC_AHBENR);
 800036a:	4b63      	ldr	r3, [pc, #396]	; (80004f8 <uart2_init+0x194>)
 800036c:	0018      	movs	r0, r3
 800036e:	f7ff fecd 	bl	800010c <GET32>
 8000372:	0003      	movs	r3, r0
 8000374:	607b      	str	r3, [r7, #4]
    ra|=1<<17; //enable port A
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2280      	movs	r2, #128	; 0x80
 800037a:	0292      	lsls	r2, r2, #10
 800037c:	4313      	orrs	r3, r2
 800037e:	607b      	str	r3, [r7, #4]
    PUT32(RCC_AHBENR,ra);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a5d      	ldr	r2, [pc, #372]	; (80004f8 <uart2_init+0x194>)
 8000384:	0019      	movs	r1, r3
 8000386:	0010      	movs	r0, r2
 8000388:	f7ff febe 	bl	8000108 <PUT32>

    ra=GET32(RCC_APB1ENR);
 800038c:	4b5b      	ldr	r3, [pc, #364]	; (80004fc <uart2_init+0x198>)
 800038e:	0018      	movs	r0, r3
 8000390:	f7ff febc 	bl	800010c <GET32>
 8000394:	0003      	movs	r3, r0
 8000396:	607b      	str	r3, [r7, #4]
    ra|=1<<17; //enable USART2
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2280      	movs	r2, #128	; 0x80
 800039c:	0292      	lsls	r2, r2, #10
 800039e:	4313      	orrs	r3, r2
 80003a0:	607b      	str	r3, [r7, #4]
    PUT32(RCC_APB1ENR,ra);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a55      	ldr	r2, [pc, #340]	; (80004fc <uart2_init+0x198>)
 80003a6:	0019      	movs	r1, r3
 80003a8:	0010      	movs	r0, r2
 80003aa:	f7ff fead 	bl	8000108 <PUT32>

    //moder 10
    ra=GET32(GPIOA_MODER);
 80003ae:	2390      	movs	r3, #144	; 0x90
 80003b0:	05db      	lsls	r3, r3, #23
 80003b2:	0018      	movs	r0, r3
 80003b4:	f7ff feaa 	bl	800010c <GET32>
 80003b8:	0003      	movs	r3, r0
 80003ba:	607b      	str	r3, [r7, #4]
    ra&=~(3<<4); //PA2
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2230      	movs	r2, #48	; 0x30
 80003c0:	4393      	bics	r3, r2
 80003c2:	607b      	str	r3, [r7, #4]
    ra&=~(3<<6); //PA3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	22c0      	movs	r2, #192	; 0xc0
 80003c8:	4393      	bics	r3, r2
 80003ca:	607b      	str	r3, [r7, #4]
    ra|=2<<4; //PA2
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2220      	movs	r2, #32
 80003d0:	4313      	orrs	r3, r2
 80003d2:	607b      	str	r3, [r7, #4]
    ra|=2<<6; //PA3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2280      	movs	r2, #128	; 0x80
 80003d8:	4313      	orrs	r3, r2
 80003da:	607b      	str	r3, [r7, #4]
    PUT32(GPIOA_MODER,ra);
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	2390      	movs	r3, #144	; 0x90
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	0011      	movs	r1, r2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f7ff fe8f 	bl	8000108 <PUT32>
    //OTYPER 0
    ra=GET32(GPIOA_OTYPER);
 80003ea:	4b45      	ldr	r3, [pc, #276]	; (8000500 <uart2_init+0x19c>)
 80003ec:	0018      	movs	r0, r3
 80003ee:	f7ff fe8d 	bl	800010c <GET32>
 80003f2:	0003      	movs	r3, r0
 80003f4:	607b      	str	r3, [r7, #4]
    ra&=~(1<<2); //PA2
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2204      	movs	r2, #4
 80003fa:	4393      	bics	r3, r2
 80003fc:	607b      	str	r3, [r7, #4]
    ra&=~(1<<3); //PA3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2208      	movs	r2, #8
 8000402:	4393      	bics	r3, r2
 8000404:	607b      	str	r3, [r7, #4]
    PUT32(GPIOA_OTYPER,ra);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a3d      	ldr	r2, [pc, #244]	; (8000500 <uart2_init+0x19c>)
 800040a:	0019      	movs	r1, r3
 800040c:	0010      	movs	r0, r2
 800040e:	f7ff fe7b 	bl	8000108 <PUT32>
    //ospeedr 11
    ra=GET32(GPIOA_OSPEEDR);
 8000412:	4b3c      	ldr	r3, [pc, #240]	; (8000504 <uart2_init+0x1a0>)
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff fe79 	bl	800010c <GET32>
 800041a:	0003      	movs	r3, r0
 800041c:	607b      	str	r3, [r7, #4]
    ra|=3<<4; //PA2
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2230      	movs	r2, #48	; 0x30
 8000422:	4313      	orrs	r3, r2
 8000424:	607b      	str	r3, [r7, #4]
    ra|=3<<6; //PA3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	22c0      	movs	r2, #192	; 0xc0
 800042a:	4313      	orrs	r3, r2
 800042c:	607b      	str	r3, [r7, #4]
    PUT32(GPIOA_OSPEEDR,ra);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a34      	ldr	r2, [pc, #208]	; (8000504 <uart2_init+0x1a0>)
 8000432:	0019      	movs	r1, r3
 8000434:	0010      	movs	r0, r2
 8000436:	f7ff fe67 	bl	8000108 <PUT32>
    //pupdr 00
    ra=GET32(GPIOA_PUPDR);
 800043a:	4b33      	ldr	r3, [pc, #204]	; (8000508 <uart2_init+0x1a4>)
 800043c:	0018      	movs	r0, r3
 800043e:	f7ff fe65 	bl	800010c <GET32>
 8000442:	0003      	movs	r3, r0
 8000444:	607b      	str	r3, [r7, #4]
    ra&=~(3<<4); //PA2
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2230      	movs	r2, #48	; 0x30
 800044a:	4393      	bics	r3, r2
 800044c:	607b      	str	r3, [r7, #4]
    ra&=~(3<<6); //PA3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	22c0      	movs	r2, #192	; 0xc0
 8000452:	4393      	bics	r3, r2
 8000454:	607b      	str	r3, [r7, #4]
    PUT32(GPIOA_PUPDR,ra);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a2b      	ldr	r2, [pc, #172]	; (8000508 <uart2_init+0x1a4>)
 800045a:	0019      	movs	r1, r3
 800045c:	0010      	movs	r0, r2
 800045e:	f7ff fe53 	bl	8000108 <PUT32>
    //afr 0001
    ra=GET32(GPIOA_AFRL);
 8000462:	4b2a      	ldr	r3, [pc, #168]	; (800050c <uart2_init+0x1a8>)
 8000464:	0018      	movs	r0, r3
 8000466:	f7ff fe51 	bl	800010c <GET32>
 800046a:	0003      	movs	r3, r0
 800046c:	607b      	str	r3, [r7, #4]
    ra&=~(0xF<<8); //PA2
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a27      	ldr	r2, [pc, #156]	; (8000510 <uart2_init+0x1ac>)
 8000472:	4013      	ands	r3, r2
 8000474:	607b      	str	r3, [r7, #4]
    ra&=~(0xF<<12); //PA3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a26      	ldr	r2, [pc, #152]	; (8000514 <uart2_init+0x1b0>)
 800047a:	4013      	ands	r3, r2
 800047c:	607b      	str	r3, [r7, #4]
    ra|=0x1<<8; //PA2
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2280      	movs	r2, #128	; 0x80
 8000482:	0052      	lsls	r2, r2, #1
 8000484:	4313      	orrs	r3, r2
 8000486:	607b      	str	r3, [r7, #4]
    ra|=0x1<<12; //PA3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2280      	movs	r2, #128	; 0x80
 800048c:	0152      	lsls	r2, r2, #5
 800048e:	4313      	orrs	r3, r2
 8000490:	607b      	str	r3, [r7, #4]
    PUT32(GPIOA_AFRL,ra);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a1d      	ldr	r2, [pc, #116]	; (800050c <uart2_init+0x1a8>)
 8000496:	0019      	movs	r1, r3
 8000498:	0010      	movs	r0, r2
 800049a:	f7ff fe35 	bl	8000108 <PUT32>

    ra=GET32(RCC_APB1RSTR);
 800049e:	4b1e      	ldr	r3, [pc, #120]	; (8000518 <uart2_init+0x1b4>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f7ff fe33 	bl	800010c <GET32>
 80004a6:	0003      	movs	r3, r0
 80004a8:	607b      	str	r3, [r7, #4]
    ra|=1<<17; //reset USART2
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2280      	movs	r2, #128	; 0x80
 80004ae:	0292      	lsls	r2, r2, #10
 80004b0:	4313      	orrs	r3, r2
 80004b2:	607b      	str	r3, [r7, #4]
    PUT32(RCC_APB1RSTR,ra);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a18      	ldr	r2, [pc, #96]	; (8000518 <uart2_init+0x1b4>)
 80004b8:	0019      	movs	r1, r3
 80004ba:	0010      	movs	r0, r2
 80004bc:	f7ff fe24 	bl	8000108 <PUT32>
    ra&=~(1<<17);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a16      	ldr	r2, [pc, #88]	; (800051c <uart2_init+0x1b8>)
 80004c4:	4013      	ands	r3, r2
 80004c6:	607b      	str	r3, [r7, #4]
    PUT32(RCC_APB1RSTR,ra);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a13      	ldr	r2, [pc, #76]	; (8000518 <uart2_init+0x1b4>)
 80004cc:	0019      	movs	r1, r3
 80004ce:	0010      	movs	r0, r2
 80004d0:	f7ff fe1a 	bl	8000108 <PUT32>

    PUT32(USART2_BRR,417); //69 for 115200 Baud, 416 or 417 for 19200 Baud @8MHz
 80004d4:	23a2      	movs	r3, #162	; 0xa2
 80004d6:	33ff      	adds	r3, #255	; 0xff
 80004d8:	4a11      	ldr	r2, [pc, #68]	; (8000520 <uart2_init+0x1bc>)
 80004da:	0019      	movs	r1, r3
 80004dc:	0010      	movs	r0, r2
 80004de:	f7ff fe13 	bl	8000108 <PUT32>
    PUT32(USART2_CR1,(1<<3)|(1<<2)|1);
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <uart2_init+0x1c0>)
 80004e4:	210d      	movs	r1, #13
 80004e6:	0018      	movs	r0, r3
 80004e8:	f7ff fe0e 	bl	8000108 <PUT32>

    return(0);
 80004ec:	2300      	movs	r3, #0
}
 80004ee:	0018      	movs	r0, r3
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b002      	add	sp, #8
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	40021014 	.word	0x40021014
 80004fc:	4002101c 	.word	0x4002101c
 8000500:	48000004 	.word	0x48000004
 8000504:	48000008 	.word	0x48000008
 8000508:	4800000c 	.word	0x4800000c
 800050c:	48000020 	.word	0x48000020
 8000510:	fffff0ff 	.word	0xfffff0ff
 8000514:	ffff0fff 	.word	0xffff0fff
 8000518:	40021010 	.word	0x40021010
 800051c:	fffdffff 	.word	0xfffdffff
 8000520:	4000440c 	.word	0x4000440c
 8000524:	40004400 	.word	0x40004400

08000528 <uart2_send>:
//------------------------------------------------------------------------
void uart2_send ( unsigned int x )
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
    while(1) if(GET32(USART2_ISR)&(1<<7)) break;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <uart2_send+0x30>)
 8000532:	0018      	movs	r0, r3
 8000534:	f7ff fdea 	bl	800010c <GET32>
 8000538:	0002      	movs	r2, r0
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	4013      	ands	r3, r2
 800053e:	d100      	bne.n	8000542 <uart2_send+0x1a>
 8000540:	e7f6      	b.n	8000530 <uart2_send+0x8>
 8000542:	46c0      	nop			; (mov r8, r8)
    PUT32(USART2_TDR,x);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a05      	ldr	r2, [pc, #20]	; (800055c <uart2_send+0x34>)
 8000548:	0019      	movs	r1, r3
 800054a:	0010      	movs	r0, r2
 800054c:	f7ff fddc 	bl	8000108 <PUT32>
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b002      	add	sp, #8
 8000556:	bd80      	pop	{r7, pc}
 8000558:	4000441c 	.word	0x4000441c
 800055c:	40004428 	.word	0x40004428

08000560 <main>:
//------------------------------------------------------------------------
int main ( void )
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
    unsigned int rx;

    clock_init();
 8000566:	f7ff fea9 	bl	80002bc <clock_init>
    uart2_init();
 800056a:	f7ff fefb 	bl	8000364 <uart2_init>
    for(rx=0;;rx++)
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
    {
        uart2_send(0x30+(rx&7));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2207      	movs	r2, #7
 8000576:	4013      	ands	r3, r2
 8000578:	3330      	adds	r3, #48	; 0x30
 800057a:	0018      	movs	r0, r3
 800057c:	f7ff ffd4 	bl	8000528 <uart2_send>
    for(rx=0;;rx++)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3301      	adds	r3, #1
 8000584:	607b      	str	r3, [r7, #4]
        uart2_send(0x30+(rx&7));
 8000586:	e7f4      	b.n	8000572 <main+0x12>

08000588 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800058e:	490e      	ldr	r1, [pc, #56]	; (80005c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <LoopForever+0xe>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a4:	4c0b      	ldr	r4, [pc, #44]	; (80005d4 <LoopForever+0x16>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005b2:	e000      	b.n	80005b6 <LoopFillZerobss+0x8>
 80005b4:	bf00      	nop
/* Call static constructors */
  bl __libc_init_array
 80005b6:	f000 f811 	bl	80005dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff ffd1 	bl	8000560 <main>

080005be <LoopForever>:

LoopForever:
    b LoopForever
 80005be:	e7fe      	b.n	80005be <LoopForever>
  ldr   r0, =_estack
 80005c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005cc:	08000644 	.word	0x08000644
  ldr r2, =_sbss
 80005d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005d4:	2000001c 	.word	0x2000001c

080005d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC_IRQHandler>
	...

080005dc <__libc_init_array>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	2600      	movs	r6, #0
 80005e0:	4d0c      	ldr	r5, [pc, #48]	; (8000614 <__libc_init_array+0x38>)
 80005e2:	4c0d      	ldr	r4, [pc, #52]	; (8000618 <__libc_init_array+0x3c>)
 80005e4:	1b64      	subs	r4, r4, r5
 80005e6:	10a4      	asrs	r4, r4, #2
 80005e8:	42a6      	cmp	r6, r4
 80005ea:	d109      	bne.n	8000600 <__libc_init_array+0x24>
 80005ec:	2600      	movs	r6, #0
 80005ee:	f000 f819 	bl	8000624 <_init>
 80005f2:	4d0a      	ldr	r5, [pc, #40]	; (800061c <__libc_init_array+0x40>)
 80005f4:	4c0a      	ldr	r4, [pc, #40]	; (8000620 <__libc_init_array+0x44>)
 80005f6:	1b64      	subs	r4, r4, r5
 80005f8:	10a4      	asrs	r4, r4, #2
 80005fa:	42a6      	cmp	r6, r4
 80005fc:	d105      	bne.n	800060a <__libc_init_array+0x2e>
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	00b3      	lsls	r3, r6, #2
 8000602:	58eb      	ldr	r3, [r5, r3]
 8000604:	4798      	blx	r3
 8000606:	3601      	adds	r6, #1
 8000608:	e7ee      	b.n	80005e8 <__libc_init_array+0xc>
 800060a:	00b3      	lsls	r3, r6, #2
 800060c:	58eb      	ldr	r3, [r5, r3]
 800060e:	4798      	blx	r3
 8000610:	3601      	adds	r6, #1
 8000612:	e7f2      	b.n	80005fa <__libc_init_array+0x1e>
 8000614:	0800063c 	.word	0x0800063c
 8000618:	0800063c 	.word	0x0800063c
 800061c:	0800063c 	.word	0x0800063c
 8000620:	08000640 	.word	0x08000640

08000624 <_init>:
 8000624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062a:	bc08      	pop	{r3}
 800062c:	469e      	mov	lr, r3
 800062e:	4770      	bx	lr

08000630 <_fini>:
 8000630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000636:	bc08      	pop	{r3}
 8000638:	469e      	mov	lr, r3
 800063a:	4770      	bx	lr
