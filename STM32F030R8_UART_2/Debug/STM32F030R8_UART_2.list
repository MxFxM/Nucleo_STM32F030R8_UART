
STM32F030R8_UART_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000270  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000330  08000338  00010338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000330  08000330  00010338  2**0
                  CONTENTS
  4 .ARM          00000000  08000330  08000330  00010338  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000330  08000338  00010338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000330  08000330  00010330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000334  08000334  00010334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000338  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000338  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010338  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003c2  00000000  00000000  00010360  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000014a  00000000  00000000  00010722  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000060  00000000  00000000  00010870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  000108d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000081a0  00000000  00000000  00010918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000052d  00000000  00000000  00018ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002abc0  00000000  00000000  00018fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00043ba5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b4  00000000  00000000  00043c20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000318 	.word	0x08000318

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000318 	.word	0x08000318

08000108 <main>:
void ClockConfig(void);
void UARTConfig(void);
void UARTSend(unsigned int x);

int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
	unsigned int i;

	ClockConfig(); // set 48MHz clock
 800010e:	f000 f80f 	bl	8000130 <ClockConfig>
	UARTConfig();
 8000112:	f000 f83f 	bl	8000194 <UARTConfig>

	for(i = 0; ; i++)
 8000116:	2300      	movs	r3, #0
 8000118:	607b      	str	r3, [r7, #4]
	    {
	        UARTSend(0x30 + (i & 7)); // make counter value to ascii-number (add number start and take 3 bits of counter) and send via UART
 800011a:	687b      	ldr	r3, [r7, #4]
 800011c:	2207      	movs	r2, #7
 800011e:	4013      	ands	r3, r2
 8000120:	3330      	adds	r3, #48	; 0x30
 8000122:	0018      	movs	r0, r3
 8000124:	f000 f894 	bl	8000250 <UARTSend>
	for(i = 0; ; i++)
 8000128:	687b      	ldr	r3, [r7, #4]
 800012a:	3301      	adds	r3, #1
 800012c:	607b      	str	r3, [r7, #4]
	        UARTSend(0x30 + (i & 7)); // make counter value to ascii-number (add number start and take 3 bits of counter) and send via UART
 800012e:	e7f4      	b.n	800011a <main+0x12>

08000130 <ClockConfig>:
  *         PLL in enabled and multiplies clock by 12, so 48MHz is output.
  *         PLL output is set as system clock.
  * @param  None
  * @retval None
  */
void ClockConfig(void) {
 8000130:	b580      	push	{r7, lr}
 8000132:	af00      	add	r7, sp, #0
	RCC->CFGR |= RCC_CFGR_PLLMUL_3 | RCC_CFGR_PLLMUL_1;  // set pll multiplier to x(10 + 2) (has to be set before pll enable)
 8000134:	4b14      	ldr	r3, [pc, #80]	; (8000188 <ClockConfig+0x58>)
 8000136:	685a      	ldr	r2, [r3, #4]
 8000138:	4b13      	ldr	r3, [pc, #76]	; (8000188 <ClockConfig+0x58>)
 800013a:	21a0      	movs	r1, #160	; 0xa0
 800013c:	0389      	lsls	r1, r1, #14
 800013e:	430a      	orrs	r2, r1
 8000140:	605a      	str	r2, [r3, #4]
	RCC->CR |= RCC_CR_PLLON;         // enable pll (to increase clock from 8MHz to 48MHz)
 8000142:	4b11      	ldr	r3, [pc, #68]	; (8000188 <ClockConfig+0x58>)
 8000144:	681a      	ldr	r2, [r3, #0]
 8000146:	4b10      	ldr	r3, [pc, #64]	; (8000188 <ClockConfig+0x58>)
 8000148:	2180      	movs	r1, #128	; 0x80
 800014a:	0449      	lsls	r1, r1, #17
 800014c:	430a      	orrs	r2, r1
 800014e:	601a      	str	r2, [r3, #0]
	RCC->CFGR &= ~(RCC_CFGR_PLLSRC); // set internal oscillator (8MHz/2) as source for pll
 8000150:	4b0d      	ldr	r3, [pc, #52]	; (8000188 <ClockConfig+0x58>)
 8000152:	685a      	ldr	r2, [r3, #4]
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <ClockConfig+0x58>)
 8000156:	490d      	ldr	r1, [pc, #52]	; (800018c <ClockConfig+0x5c>)
 8000158:	400a      	ands	r2, r1
 800015a:	605a      	str	r2, [r3, #4]
	RCC->CFGR &= ~(RCC_CFGR_PPRE_2); // prescaler for APB clock is x1
 800015c:	4b0a      	ldr	r3, [pc, #40]	; (8000188 <ClockConfig+0x58>)
 800015e:	685a      	ldr	r2, [r3, #4]
 8000160:	4b09      	ldr	r3, [pc, #36]	; (8000188 <ClockConfig+0x58>)
 8000162:	490b      	ldr	r1, [pc, #44]	; (8000190 <ClockConfig+0x60>)
 8000164:	400a      	ands	r2, r1
 8000166:	605a      	str	r2, [r3, #4]
	RCC->CFGR &= ~(RCC_CFGR_HPRE_3); // prescaler for HCLK clock is x1
 8000168:	4b07      	ldr	r3, [pc, #28]	; (8000188 <ClockConfig+0x58>)
 800016a:	685a      	ldr	r2, [r3, #4]
 800016c:	4b06      	ldr	r3, [pc, #24]	; (8000188 <ClockConfig+0x58>)
 800016e:	2180      	movs	r1, #128	; 0x80
 8000170:	438a      	bics	r2, r1
 8000172:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_1;      // pll as source for SYSCLK
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <ClockConfig+0x58>)
 8000176:	685a      	ldr	r2, [r3, #4]
 8000178:	4b03      	ldr	r3, [pc, #12]	; (8000188 <ClockConfig+0x58>)
 800017a:	2102      	movs	r1, #2
 800017c:	430a      	orrs	r2, r1
 800017e:	605a      	str	r2, [r3, #4]
}
 8000180:	46c0      	nop			; (mov r8, r8)
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	46c0      	nop			; (mov r8, r8)
 8000188:	40021000 	.word	0x40021000
 800018c:	fffeffff 	.word	0xfffeffff
 8000190:	fffffbff 	.word	0xfffffbff

08000194 <UARTConfig>:
  *         With this only transmitting is enabled.
  *         Baudrate is 19200.
  * @param  None
  * @retval None
  */
void UARTConfig() {
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // enable GPIOA
 8000198:	4b29      	ldr	r3, [pc, #164]	; (8000240 <UARTConfig+0xac>)
 800019a:	695a      	ldr	r2, [r3, #20]
 800019c:	4b28      	ldr	r3, [pc, #160]	; (8000240 <UARTConfig+0xac>)
 800019e:	2180      	movs	r1, #128	; 0x80
 80001a0:	0289      	lsls	r1, r1, #10
 80001a2:	430a      	orrs	r2, r1
 80001a4:	615a      	str	r2, [r3, #20]

	RCC->APB1ENR |= 1<<17; // enable UART2 peripheral
 80001a6:	4b26      	ldr	r3, [pc, #152]	; (8000240 <UARTConfig+0xac>)
 80001a8:	69da      	ldr	r2, [r3, #28]
 80001aa:	4b25      	ldr	r3, [pc, #148]	; (8000240 <UARTConfig+0xac>)
 80001ac:	2180      	movs	r1, #128	; 0x80
 80001ae:	0289      	lsls	r1, r1, #10
 80001b0:	430a      	orrs	r2, r1
 80001b2:	61da      	str	r2, [r3, #28]

	GPIOA->MODER &= ~(GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0); // with next line, set PA2 and PA3 to 10 = Alternate function mode
 80001b4:	2390      	movs	r3, #144	; 0x90
 80001b6:	05db      	lsls	r3, r3, #23
 80001b8:	681a      	ldr	r2, [r3, #0]
 80001ba:	2390      	movs	r3, #144	; 0x90
 80001bc:	05db      	lsls	r3, r3, #23
 80001be:	2150      	movs	r1, #80	; 0x50
 80001c0:	438a      	bics	r2, r1
 80001c2:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1;
 80001c4:	2390      	movs	r3, #144	; 0x90
 80001c6:	05db      	lsls	r3, r3, #23
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	2390      	movs	r3, #144	; 0x90
 80001cc:	05db      	lsls	r3, r3, #23
 80001ce:	21a0      	movs	r1, #160	; 0xa0
 80001d0:	430a      	orrs	r2, r1
 80001d2:	601a      	str	r2, [r3, #0]

	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT_2 | GPIO_OTYPER_OT_3); // output push-pull
 80001d4:	2390      	movs	r3, #144	; 0x90
 80001d6:	05db      	lsls	r3, r3, #23
 80001d8:	685a      	ldr	r2, [r3, #4]
 80001da:	2390      	movs	r3, #144	; 0x90
 80001dc:	05db      	lsls	r3, r3, #23
 80001de:	210c      	movs	r1, #12
 80001e0:	438a      	bics	r2, r1
 80001e2:	605a      	str	r2, [r3, #4]

	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR2_0 | GPIO_OSPEEDR_OSPEEDR2_1 | GPIO_OSPEEDR_OSPEEDR3_0 | GPIO_OSPEEDR_OSPEEDR3_1; // high speed outputs
 80001e4:	2390      	movs	r3, #144	; 0x90
 80001e6:	05db      	lsls	r3, r3, #23
 80001e8:	689a      	ldr	r2, [r3, #8]
 80001ea:	2390      	movs	r3, #144	; 0x90
 80001ec:	05db      	lsls	r3, r3, #23
 80001ee:	21f0      	movs	r1, #240	; 0xf0
 80001f0:	430a      	orrs	r2, r1
 80001f2:	609a      	str	r2, [r3, #8]

	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR2_0 | GPIO_PUPDR_PUPDR2_1 | GPIO_PUPDR_PUPDR3_0 | GPIO_PUPDR_PUPDR3_1); // no push, no pull
 80001f4:	2390      	movs	r3, #144	; 0x90
 80001f6:	05db      	lsls	r3, r3, #23
 80001f8:	68da      	ldr	r2, [r3, #12]
 80001fa:	2390      	movs	r3, #144	; 0x90
 80001fc:	05db      	lsls	r3, r3, #23
 80001fe:	21f0      	movs	r1, #240	; 0xf0
 8000200:	438a      	bics	r2, r1
 8000202:	60da      	str	r2, [r3, #12]

	GPIOA->AFR[0] &= ~(0xF<<GPIO_AFRL_AFSEL2_Pos | 0xF<<GPIO_AFRL_AFSEL3_Pos); // with next line, set alternate function AF1
 8000204:	2390      	movs	r3, #144	; 0x90
 8000206:	05db      	lsls	r3, r3, #23
 8000208:	6a1a      	ldr	r2, [r3, #32]
 800020a:	2390      	movs	r3, #144	; 0x90
 800020c:	05db      	lsls	r3, r3, #23
 800020e:	490d      	ldr	r1, [pc, #52]	; (8000244 <UARTConfig+0xb0>)
 8000210:	400a      	ands	r2, r1
 8000212:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= 1<<GPIO_AFRL_AFSEL2_Pos | 1<<GPIO_AFRL_AFSEL3_Pos;
 8000214:	2390      	movs	r3, #144	; 0x90
 8000216:	05db      	lsls	r3, r3, #23
 8000218:	6a1a      	ldr	r2, [r3, #32]
 800021a:	2390      	movs	r3, #144	; 0x90
 800021c:	05db      	lsls	r3, r3, #23
 800021e:	2188      	movs	r1, #136	; 0x88
 8000220:	0149      	lsls	r1, r1, #5
 8000222:	430a      	orrs	r2, r1
 8000224:	621a      	str	r2, [r3, #32]

	USART2->BRR = 2500; // 19200 Baud @ 48MHz
 8000226:	4b08      	ldr	r3, [pc, #32]	; (8000248 <UARTConfig+0xb4>)
 8000228:	4a08      	ldr	r2, [pc, #32]	; (800024c <UARTConfig+0xb8>)
 800022a:	60da      	str	r2, [r3, #12]

	USART2->CR1 |= USART_CR1_UE | USART_CR1_RE | USART_CR1_TE; // enable uart and enable transmitter. To receive also enable
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <UARTConfig+0xb4>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b05      	ldr	r3, [pc, #20]	; (8000248 <UARTConfig+0xb4>)
 8000232:	210d      	movs	r1, #13
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
}
 8000238:	46c0      	nop			; (mov r8, r8)
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	40021000 	.word	0x40021000
 8000244:	ffff00ff 	.word	0xffff00ff
 8000248:	40004400 	.word	0x40004400
 800024c:	000009c4 	.word	0x000009c4

08000250 <UARTSend>:
  * @brief  Transmits using UART2.
  * @param  x : data to transmit
  * @retval None
  */
void UARTSend(unsigned int x)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
    while (1) { // wait until last transmission is over
    	if (USART2->ISR & USART_ISR_TXE) { // if transmit-register is empty
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <UARTSend+0x28>)
 800025a:	69db      	ldr	r3, [r3, #28]
 800025c:	2280      	movs	r2, #128	; 0x80
 800025e:	4013      	ands	r3, r2
 8000260:	d100      	bne.n	8000264 <UARTSend+0x14>
 8000262:	e7f9      	b.n	8000258 <UARTSend+0x8>
    		break; // break while loop
 8000264:	46c0      	nop			; (mov r8, r8)
    	}
    }

    USART2->TDR = x; // put new data in transmission register
 8000266:	4b04      	ldr	r3, [pc, #16]	; (8000278 <UARTSend+0x28>)
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	b292      	uxth	r2, r2
 800026c:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	46bd      	mov	sp, r7
 8000272:	b002      	add	sp, #8
 8000274:	bd80      	pop	{r7, pc}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	40004400 	.word	0x40004400

0800027c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000282:	490e      	ldr	r1, [pc, #56]	; (80002bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000284:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <LoopForever+0xe>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000288:	e002      	b.n	8000290 <LoopCopyDataInit>

0800028a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800028c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028e:	3304      	adds	r3, #4

08000290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000294:	d3f9      	bcc.n	800028a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000296:	4a0b      	ldr	r2, [pc, #44]	; (80002c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000298:	4c0b      	ldr	r4, [pc, #44]	; (80002c8 <LoopForever+0x16>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800029c:	e001      	b.n	80002a2 <LoopFillZerobss>

0800029e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a0:	3204      	adds	r2, #4

080002a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a4:	d3fb      	bcc.n	800029e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002a6:	e000      	b.n	80002aa <LoopFillZerobss+0x8>
 80002a8:	bf00      	nop
/* Call static constructors */
  bl __libc_init_array
 80002aa:	f000 f811 	bl	80002d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ae:	f7ff ff2b 	bl	8000108 <main>

080002b2 <LoopForever>:

LoopForever:
    b LoopForever
 80002b2:	e7fe      	b.n	80002b2 <LoopForever>
  ldr   r0, =_estack
 80002b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c0:	08000338 	.word	0x08000338
  ldr r2, =_sbss
 80002c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c8:	2000001c 	.word	0x2000001c

080002cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002cc:	e7fe      	b.n	80002cc <ADC_IRQHandler>
	...

080002d0 <__libc_init_array>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	2600      	movs	r6, #0
 80002d4:	4d0c      	ldr	r5, [pc, #48]	; (8000308 <__libc_init_array+0x38>)
 80002d6:	4c0d      	ldr	r4, [pc, #52]	; (800030c <__libc_init_array+0x3c>)
 80002d8:	1b64      	subs	r4, r4, r5
 80002da:	10a4      	asrs	r4, r4, #2
 80002dc:	42a6      	cmp	r6, r4
 80002de:	d109      	bne.n	80002f4 <__libc_init_array+0x24>
 80002e0:	2600      	movs	r6, #0
 80002e2:	f000 f819 	bl	8000318 <_init>
 80002e6:	4d0a      	ldr	r5, [pc, #40]	; (8000310 <__libc_init_array+0x40>)
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <__libc_init_array+0x44>)
 80002ea:	1b64      	subs	r4, r4, r5
 80002ec:	10a4      	asrs	r4, r4, #2
 80002ee:	42a6      	cmp	r6, r4
 80002f0:	d105      	bne.n	80002fe <__libc_init_array+0x2e>
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	00b3      	lsls	r3, r6, #2
 80002f6:	58eb      	ldr	r3, [r5, r3]
 80002f8:	4798      	blx	r3
 80002fa:	3601      	adds	r6, #1
 80002fc:	e7ee      	b.n	80002dc <__libc_init_array+0xc>
 80002fe:	00b3      	lsls	r3, r6, #2
 8000300:	58eb      	ldr	r3, [r5, r3]
 8000302:	4798      	blx	r3
 8000304:	3601      	adds	r6, #1
 8000306:	e7f2      	b.n	80002ee <__libc_init_array+0x1e>
 8000308:	08000330 	.word	0x08000330
 800030c:	08000330 	.word	0x08000330
 8000310:	08000330 	.word	0x08000330
 8000314:	08000334 	.word	0x08000334

08000318 <_init>:
 8000318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031e:	bc08      	pop	{r3}
 8000320:	469e      	mov	lr, r3
 8000322:	4770      	bx	lr

08000324 <_fini>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr
